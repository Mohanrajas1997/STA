CREATE DEFINER=`root`@`%` PROCEDURE `pr_sta_generate_cdsl_upload`(
  in in_comp_gid int,
  in in_upload_type int,
  in in_action_by varchar(16),
  out out_upload_gid int,
  out out_result int,
  out out_msg text
)
me:BEGIN
  declare err_msg text default '';
  declare err_flag boolean default false;

  declare v_comp_gid int default 0;
  declare v_entity_gid int default 0;
  declare v_upload_sno int default 0;
  declare v_tran_code char(2) default '';
  declare v_file_name varchar(64) default '';
  declare v_file_extension_no smallint default 0;
  declare v_file_extension varchar(8);

  declare v_entity_cdsl_dp_id varchar(8) default '';
  declare v_cdsl_sno int default 0;
  declare v_cdsl_count int default 0;

  declare v_inward_inex_status tinyint default 0;
  declare v_upload_done_status tinyint default 0;

  declare v_count int default 0;
  declare v_inward_gid int default 0;
  declare v_upload_gid int default 0;

  
  declare done int default 0;

  declare cdsl_csr cursor for
    select distinct b.inward_gid from sta_trn_tqueue as a
    inner join sta_trn_tinward as b on b.inward_gid = a.inward_gid and b.queue_gid = a.queue_gid and b.delete_flag = 'N'
    inner join sta_mst_ttrantype as c on c.trantype_code = b.tran_code and c.delete_flag = 'N'
    inner join sta_mst_tgroup as d on d.group_code = a.queue_from and c.delete_flag = 'N'
    inner join sta_mst_tcompany as e on e.comp_gid = b.comp_gid and e.delete_flag = 'N'
    inner join sta_trn_tdematpend as f on b.dematpend_gid = f.dematpend_gid and f.delete_flag = 'N'
    where b.comp_gid = in_comp_gid
    and a.queue_to = 'U'
    and c.demat_flag = 'Y'
    and f.depository_code = 'C'
    and a.action_status = 0
    and b.upload_gid = 0
    and a.delete_flag = 'N';

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=1;

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    ROLLBACK;

    set out_upload_gid = v_upload_gid;
    set out_result = 0;
    set out_msg = 'SQLEXCEPTION';
  END;

  
  select
    b.entity_gid,a.comp_gid,a.upload_sno,b.cdsl_sno,b.cdsl_dp_id
  into
    v_entity_gid,v_comp_gid,v_upload_sno,v_cdsl_sno,v_entity_cdsl_dp_id
  from sta_mst_tcompany as a
  inner join sta_mst_tentity as b on a.entity_gid = b.entity_gid and b.delete_flag = 'N'
  where a.comp_gid = in_comp_gid
  and a.delete_flag = 'N';

  set v_entity_gid = ifnull(v_entity_gid,0);
  set v_comp_gid = ifnull(v_comp_gid,0);
  set v_upload_sno = ifnull(v_upload_sno,1);
  set v_cdsl_sno = ifnull(v_cdsl_sno,1);
  set v_entity_cdsl_dp_id = ifnull(v_entity_cdsl_dp_id,'');

  
  if v_entity_gid = 0 then
    set err_msg := concat(err_msg,'Invalid entity,');
    set err_flag := true;
  end if;

  if v_comp_gid = 0 then
    set err_msg := concat(err_msg,'Invalid company,');
    set err_flag := true;
  end if;

  
  if v_entity_cdsl_dp_id = '' then
    set err_msg := concat(err_msg,'Entity cdsl dp id cannot be blank ,');
    set err_flag := true;
  end if;

  
  select status_value into v_inward_inex_status from sta_mst_tstatus
  where status_type = 'Inward'
  and status_desc = 'Inex'
  and delete_flag = 'N';

  set v_inward_inex_status := ifnull(v_inward_inex_status,0);

  if v_inward_inex_status = 0 then
    set err_msg := concat(err_msg,'Inward inex status to be maintained,');
    set err_flag := true;
  end if;


  select status_value into v_upload_done_status from sta_mst_tstatus
  where status_type = 'Upload'
  and status_desc = 'Upload Done'
  and delete_flag = 'N';

  set v_upload_done_status := ifnull(v_upload_done_status,0);

  if v_upload_done_status = 0 then
    set err_msg := concat(err_msg,'Upload done status to be maintained,');
    set err_flag := true;
  end if;

  
  select count(*) into v_count from sta_trn_tqueue as a
  inner join sta_trn_tinward as b on b.inward_gid = a.inward_gid and b.queue_gid = a.queue_gid and b.delete_flag = 'N'
  inner join sta_mst_ttrantype as c on c.trantype_code = b.tran_code and c.delete_flag = 'N'
  inner join sta_mst_tgroup as d on d.group_code = a.queue_from and c.delete_flag = 'N'
  inner join sta_mst_tcompany as e on e.comp_gid = b.comp_gid and e.delete_flag = 'N'
  inner join sta_trn_tdematpend as f on b.dematpend_gid = f.dematpend_gid and f.delete_flag = 'N'
  where b.comp_gid = in_comp_gid
  and a.queue_to = 'U'
  and c.demat_flag = 'Y'
  and f.depository_code = 'C'
  and a.action_status = 0
  and b.upload_gid = 0
  and a.delete_flag = 'N';

  set v_count = ifnull(v_count,0);

  if v_count = 0 then
    set err_msg := concat(err_msg,'No record found,');
    set err_flag := true;
  end if;

  if exists(select upload_gid from sta_trn_tupload
      where comp_gid = in_comp_gid
      and upload_type = in_upload_type
      and upload_status = v_upload_done_status
      and delete_flag = 'N') then
    set err_msg := concat(err_msg,'Previous upload status not yet updated,');
    set err_flag := true;
  end if;


  if err_flag = false then

    select count(*) into v_file_extension_no from sta_trn_tupload
    where upload_type = in_upload_type
    and upload_date >= curdate()
    and upload_date < adddate(curdate(),1)
    and delete_flag = 'N';

    set v_file_extension_no = ifnull(v_file_extension_no,0);
    set v_file_extension_no = v_file_extension_no + 1;

    set v_file_extension = cast(v_file_extension_no as char);

    if length(v_file_extension) < 3 then
      set v_file_extension = lpad(v_file_extension,3,'0');
    end if;

    set v_file_name = concat('18',v_entity_cdsl_dp_id);
    set v_file_name = concat(v_file_name,'.',date_format(curdate(),'%d%m%Y'),'.',v_file_extension);
  end if;

  if err_flag = false then

    insert into sta_trn_tupload
    (
      comp_gid,upload_type,upload_no,upload_date,upload_by,upload_status,
      upload_filename,upload_filename_extension
    )
    values
    (
      in_comp_gid,in_upload_type,v_upload_sno,sysdate(),in_action_by,v_upload_done_status,
      v_file_name,v_file_extension
    );

    
    select max(upload_gid) into v_upload_gid from sta_trn_tupload;

    
    update sta_mst_tcompany
    set upload_sno = upload_sno + 1
    where comp_gid = in_comp_gid
    and delete_flag = 'N';

    
    set done = 0;

    open cdsl_csr;

    cdsl_loop:loop
      fetch cdsl_csr into v_inward_gid;

      if done = 1 then
        leave cdsl_loop;
      end if;

      
      update sta_trn_tinward set
        upload_gid = v_upload_gid
      where inward_gid = v_inward_gid
      and upload_gid = 0
      and delete_flag = 'N';

      set v_cdsl_count = v_cdsl_count + 1;
    end loop cdsl_loop;

    close cdsl_csr;

    if v_cdsl_count > 0 then
      
      update sta_trn_tupload set
        cdsl_sno = v_cdsl_sno
      where upload_gid = v_upload_gid
      and delete_flag = 'N';

      
      update sta_mst_tentity set
        cdsl_sno = cdsl_sno + 1
      where entity_gid = v_entity_gid
      and delete_flag = 'N';
    end if;
  else
    set out_upload_gid = v_upload_gid;
    set out_result = 0;
    set out_msg = err_msg;
    leave me;
  end if;

  set out_upload_gid = v_upload_gid;
  set out_msg = 'Upload generated successfully !';
  set out_result = 1;
END